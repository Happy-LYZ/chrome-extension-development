{"version":3,"file":"5.f9f37f79c9b99061f9d3.hot-update.js","sources":["webpack:///app/components/PageOptions/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport OptionItem from '../OptionItem';\nimport * as request from '../../utils/request';\nimport Options from '../../utils/options';\nimport * as tabUtil from '../../utils/tabUtil';\nimport InfoItem from '../InfoItem';\nimport QRcode from 'qrcode';\nimport './style.scss';\n\nconst chrome = window.chrome;\n\nclass PageOptions extends Component {\n    //同步获取设置\n    state = Options.getSync();\n\n    componentWillMount() {\n        this.fetchOptions();\n        this.getTabInfo();\n\n        //监听窗口激活，更新设置项\n        //这里是考虑到同时打开多个设置项页面，也可以保持设置同步\n        chrome.runtime.onMessage.addListener(data => {\n            if (data.action === 'active') {\n                this.fetchOptions();\n            }\n        });\n    }\n\n    async fetchOptions() {\n        //异步获取设置\n        const options = await Options.getAsync();\n        this.setState(options);\n    }\n\n    async setOption(key, value) {\n        //调用background中的保存设置方法\n        const options = await Options.setAsync(key, value);\n\n        //设置完成后向当前页面广播设置更新消息\n        //页面的content scripts中也添加了监听器，当捕获到该条广播时，会根据相关设置调整页面显示\n        request.sendActiveTabRequest({\n            action: 'updateOption',\n            options\n        });\n\n        request.sendRuntimeMessage({\n            action: 'updateOption'\n        });\n\n        //同步组件状态中的设置项，以触发组件展示更新\n        this.setState({\n            [key]: value\n        });\n    }\n\n    async getTabInfo() {\n        const allTabs = await tabUtil.getAll();\n        const curTab = await tabUtil.getCurrent();\n        this.setState({\n            curTab: {\n                index: curTab.index + 1,\n                url: curTab.url,\n                title: curTab.title\n            }\n        });\n\n        this.createQrcode(curTab.url);\n\n        this.setState({\n            allTabs: allTabs.length\n        });\n    }\n\n    createQrcode(text) {\n        QRcode.toDataURL(text, {\n            color: {\n                dark: '#a94442', // Blue dots\n                light: '#fff' // Transparent background\n            },\n        }, (err, qrcode) => {\n            this.setState({\n                qrcode\n            });\n        })\n    }\n\n    tabUtil = {\n        openGithubInNewTab() {\n            chrome.tabs.create({\n                url: 'https://github.com/qiqiboy'\n            });\n        },\n        async openGithubInCurTab() {\n            const tab = await tabUtil.getCurrent();\n            chrome.tabs.update(tab.id, {\n                url: 'https://github.com/qiqiboy'\n            });\n        },\n        async createBlankTab() {\n            const tab = await tabUtil.getCurrent();\n            chrome.tabs.create({\n                index: tab.index + 1\n            });\n        },\n        async closeCurTab() {\n            const tab = await tabUtil.getCurrent();\n            chrome.tabs.remove(tab.id);\n        },\n        createNewWindow() {\n            chrome.windows.create();\n        },\n        closeCurWindow() {\n            chrome.windows.getCurrent(null, win => {\n                chrome.windows.remove(win.id);\n            });\n        },\n        zoomMoveMaxCurWindow() {\n            window.close(); //关闭popup窗口\n\n            chrome.windows.getCurrent(null, win => {\n                //要执行的步骤更新的窗口信息\n                const steps = [{\n                    state: 'minimized'\n                }, {\n                    state: 'normal'\n                }, {\n                    width: 500,\n                    height: 500,\n                    top: 0,\n                    left: 0\n                }, {\n                    top: window.screen.availHeight - 500,\n                    left: window.screen.availWidth - 500\n                }, {\n                    state: 'fullscreen'\n                }, {\n                    state: 'normal'\n                }, {\n                    state: 'maximized'\n                }, {\n                    width: win.width,\n                    height: win.height,\n                    focused: true\n                }];\n\n                chrome.runtime.sendMessage({\n                    action: 'updateWindow',\n                    steps\n                });\n            });\n        }\n    }\n\n    render() {\n        const { curTab, allTabs, qrcode, ...options } = this.state;\n\n        return (\n            <div>\n                {curTab && <div className=\"cur-tab-info\">\n                    <InfoItem label=\"标题\" content={curTab.title} />\n                    <InfoItem label=\"地址\" content={curTab.url} />\n                    <InfoItem label=\"次序\" content={`总tab数：${allTabs}，当前：${curTab.index}`} />\n                    <img src={qrcode} width=\"100\" className=\"qrcode\" alt=\"qrcode\" />\n                </div>}\n                <OptionItem active={options.enableSkin} onChange={this.setOption.bind(this, 'enableSkin')}>\n                    {options.enableSkin ? '黑色皮肤已启用' : '未启用黑色皮肤'}\n                </OptionItem>\n\n                <OptionItem active={options.clearMode} onChange={this.setOption.bind(this, 'clearMode')}>\n                    {options.clearMode ? '清爽模式' : '正常模式'}\n                </OptionItem>\n\n                <OptionItem active={options.fullscreen} onChange={this.setOption.bind(this, 'fullscreen')}>\n                    {options.fullscreen ? '全屏模式' : '非全屏模式'}\n                </OptionItem>\n\n                <div className=\"btn-group\">\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.openGithubInNewTab}>新标签页中访问Github</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.openGithubInCurTab}>当前标签页中访问Github</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.createBlankTab}>创建新标签页</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.closeCurWindow}>关闭当前窗口</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.createNewWindow}>创建新窗口</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.zoomMoveMaxCurWindow}>缩小移动最大化当前窗口</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={this.tabUtil.closeCurTab}>关闭当前标签页</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={tabUtil.moveCurTabLast}>将当前标签页移动到最后面</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={tabUtil.moveCurTabFirst}>将当前标签页移动到最前面</button>\n                    <button className=\"btn-option-item btn btn-success\" onClick={tabUtil.copyCurWindow}>复制当前窗口</button>\n                </div>\n\n                <OptionItem active={options.animateIcon} onChange={this.setOption.bind(this, 'animateIcon')}>\n                    {options.animateIcon ? '动态icon' : '静态icon'}\n                </OptionItem>\n            </div>\n        );\n    }\n}\n\nexport default PageOptions;\n\n\n\n// WEBPACK FOOTER //\n// app/components/PageOptions/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA;AA0EA;AACA;AACA;AADA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAYA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AAAA;AACA;AADA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAkBA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAmBA;AACA;AAAA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAhEA;;AA1EA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAIA;AACA;;AADA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AAEA;AACA;;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AADA;AAGA;AACA;;;AAqaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAhCA;AAqCA;;;;AAvLA;AACA;AAyLA;;;;A","sourceRoot":""}